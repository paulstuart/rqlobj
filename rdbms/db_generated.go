// generated by 'dbgen'; DO NOT EDIT

package main

//
// testStruct DBObject generator
//
func (o testStruct) NewObj() interface{} {
	return new(testStruct)
}

//
// testStruct DBObject interface functions
//
func (o *testStruct) Primary() (int64, bool) {
	return o.ID, true
}

func (o *testStruct) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Kind, o.Data, o.Timestamp, o.When}
}

func (o *testStruct) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Kind, o.Data, o.Timestamp, o.When, o.ID}
}

func (o *testStruct) Receivers() []interface{} {
	return []interface{}{&o.ID, &o.Name, &o.Kind, &o.Data, &o.Timestamp, &o.When}
}

func (o *testStruct) KeyValues() []interface{} {
	return []interface{}{o.ID}
}

func (o *testStruct) SetPrimary(id int64) {
	o.ID = id
}

type _testStruct []testStruct

func (o *_testStruct) SQLGet(extra string) string {
	return "select id,name,kind,data,ts,ts2 from rdbms_structs " + extra + ";"
}

// SQLResults takes the equivalent of the Scan function in database/sql
func (o *_testStruct) SQLResults(fn func(...interface{}) error) error {
	var add testStruct
	if err := fn((&add).Receivers()...); err != nil {
		return err
	}
	*o = append(*o, add)
	return nil
}

func (o *testStruct) TableName() string {
	return "rdbms_structs"
}

func (o *testStruct) SelectFields() string {
	return "id,name,kind,data,ts,ts2"
}

func (o *testStruct) InsertFields() string {
	return "name,kind,data,ts,ts2"
}

func (o *testStruct) KeyFields() []string {
	return []string{"id"}
}

func (o *testStruct) KeyNames() []string {
	return []string{"ID"}
}

func (o *testStruct) Names() []string {
	return []string{"Name", "Kind", "Data", "Timestamp", "When"}
}
