// generated by 'dbgen'; DO NOT EDIT

package main

import (
	"time"
)

//
// testStruct DBObject generator
//
func (o testStruct) NewObj() interface{} {
	return new(testStruct)
}

//
// testStruct DBObject interface functions
//
func (o *testStruct) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Kind, o.Data, o.When, o.Timestamp}
}

func (o *testStruct) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Kind, o.Data, o.When, o.Timestamp, o.ID}
}

func (o *testStruct) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Name, &o.Kind, &o.Data, &o.When, &o.Timestamp}
}

func (o *testStruct) Key() int64 {
	return o.ID
}

func (o *testStruct) SetID(id int64) {
	o.ID = id
}

type _testStruct []testStruct

func (o *_testStruct) SQLGet(where string) string {
	return "select id,name,kind,data,ts2,ts from structs " + where + ";"
}

// SQLResults takes the equivalent of the Scan function in database/sql
func (o *_testStruct) SQLResults(fn func(...interface{}) error) error {
	var add testStruct
	if err := fn((&add).MemberPointers()...); err != nil {
		return err
	}
	*o = append(*o, add)
	return nil
}

func (o *testStruct) TableName() string {
	return "structs"
}

func (o *testStruct) SelectFields() string {
	return "id,name,kind,data,ts2,ts"
}

func (o *testStruct) InsertFields() string {
	return "name,kind,data,ts2,ts"
}

func (o *testStruct) KeyField() string {
	return "id"
}

func (o *testStruct) KeyName() string {
	return "ID"
}

func (o *testStruct) Names() []string {
	return []string{"Name", "Kind", "Data", "When", "Timestamp"}
}

func (o *testStruct) ModifiedBy(user int64, t time.Time) {
}
