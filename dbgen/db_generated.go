// generated by 'dbgen'; DO NOT EDIT

package main

import (
	"time"
)

//
// Generator DBObject generator
//
func (o Generator) NewObj() interface{} {
	return new(Generator)
}

//
// Generator DBObject interface functions
//
func (o *Generator) InsertValues() []interface{} {
	return []interface{}{o.buf}
}

func (o *Generator) UpdateValues() []interface{} {
	return []interface{}{o.buf}
}

func (o *Generator) MemberPointers() []interface{} {
	return []interface{}{&o.buf}
}

func (o *Generator) Key() int64 {
	return 0
}

func (o *Generator) SetID(id int64) {
}

type _Generator []Generator

func (o *_Generator) SQLGet(extra string) string {
	return "select buf from generator " + extra + ";"
}

// SQLResults takes the equivalent of the Scan function in database/sql
func (o *_Generator) SQLResults(fn func(...interface{}) error) error {
	var add Generator
	if err := fn((&add).MemberPointers()...); err != nil {
		return err
	}
	*o = append(*o, add)
	return nil
}

func (o *Generator) TableName() string {
	return "generator"
}

func (o *Generator) SelectFields() string {
	return "buf"
}

func (o *Generator) InsertFields() string {
	return "buf"
}

func (o *Generator) KeyField() string {
	return ""
}

func (o *Generator) KeyName() string {
	return ""
}

func (o *Generator) Names() []string {
	return []string{"buf"}
}

func (o *Generator) ModifiedBy(user int64, t time.Time) {
}

//
// Package DBObject generator
//
func (o Package) NewObj() interface{} {
	return new(Package)
}

//
// Package DBObject interface functions
//
func (o *Package) InsertValues() []interface{} {
	return []interface{}{o.dir, o.name, o.fakeTime}
}

func (o *Package) UpdateValues() []interface{} {
	return []interface{}{o.dir, o.name, o.fakeTime}
}

func (o *Package) MemberPointers() []interface{} {
	return []interface{}{&o.dir, &o.name, &o.fakeTime}
}

func (o *Package) Key() int64 {
	return 0
}

func (o *Package) SetID(id int64) {
}

type _Package []Package

func (o *_Package) SQLGet(extra string) string {
	return "select dir,name,fake from pkg " + extra + ";"
}

// SQLResults takes the equivalent of the Scan function in database/sql
func (o *_Package) SQLResults(fn func(...interface{}) error) error {
	var add Package
	if err := fn((&add).MemberPointers()...); err != nil {
		return err
	}
	*o = append(*o, add)
	return nil
}

func (o *Package) TableName() string {
	return "pkg"
}

func (o *Package) SelectFields() string {
	return "dir,name,fake"
}

func (o *Package) InsertFields() string {
	return "dir,name,fake"
}

func (o *Package) KeyField() string {
	return ""
}

func (o *Package) KeyName() string {
	return ""
}

func (o *Package) Names() []string {
	return []string{"dir", "name", "fakeTime"}
}

func (o *Package) ModifiedBy(user int64, t time.Time) {
}
